/**
==== SCROLLS OF ANTHRAKIA ====
- [No loadout code available]
**/

class ODRRandomScroll : HDInvRandomSpawner {
	default {
		dropitem "ODRScrollPhlegethon", 256, 1;
		dropitem "ODRScrollEresia", 256, 1;
		dropitem "ODRScrollLibidine", 256, 1;
	}
}

class ODRScrollCaster : HDWeapon {
	private int scrollFlags;
	flagdef IDENTIFIED: scrollFlags, 0;
	flagdef CASTWITHALT: scrollFlags, 1;
	
	string dropActor;
	property drop:dropActor;
	string spellName;
	property title:spellName;
	int learnVal;
	property spell:learnVal;
	int inputVal;
	property input:inputVal;
	
	default{
		+weapon.wimpy_weapon 
		+weapon.no_auto_switch 
		+weapon.cheatnotweapon
		+nointeraction
		+hdweapon.dontdisarm
		weapon.slotnumber 0;
		weapon.selectionorder 1100;
		tag "Magic Scroll";
		ODRScrollCaster.title "Dummy Spell";
		ODRScrollCaster.spell 0;
		ODRScrollCaster.input 0;
		ODRScrollCaster.drop "ODRScrollPickup";
	}
	
	override double gunmass(){
		return 1;
	}
	override double weaponbulk(){
		return 2;
	}
	
	virtual string GetSpellInput() {
		if (!inputVal) {return "\ciERROR: NO INPUT DEFINED\c-";}
		int readInput = inputVal;
		string finalOutput = "";
		while (readInput > 0) {
			switch (readInput % 10) {
				case 1:
					finalOutput = WEPHELP_RELOAD..finalOutput;
					break;
				case 2:
					finalOutput = WEPHELP_ALTRELOAD..finalOutput;
					break;
				case 3:
					finalOutput = WEPHELP_ZOOM..finalOutput;
					break;
				case 4:
					finalOutput = WEPHELP_FIREMODE..finalOutput;
					break;
				case 5:
					finalOutput = WEPHELP_UNLOAD..finalOutput;
					break;
				default:
					return finalOutput;
					break;
			}
			readInput /= 10;
			if (readInput > 0) {finalOutput = ", "..finalOutput;}
		}
		return finalOutput;
	}
		
	action void A_CheckScrollInputs() {
		if (JustPressed(BT_RELOAD)) {
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[SCROLL_INCANTATION] *= 10;
			invoker.weaponstatus[SCROLL_INCANTATION] += 1;
		}
		
		if (JustPressed(BT_USER1)) { 
			// User1 is AltReload
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[SCROLL_INCANTATION] *= 10;
			invoker.weaponstatus[SCROLL_INCANTATION] += 2;
		}
		
		if (JustPressed(BT_ZOOM)) {
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[SCROLL_INCANTATION] *= 10;
			invoker.weaponstatus[SCROLL_INCANTATION] += 3;
		}
		
		if (JustPressed(BT_USER2)) {
			// User2 is Firemode
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[SCROLL_INCANTATION] *= 10;
			invoker.weaponstatus[SCROLL_INCANTATION] += 4;
		}
		
		if (JustPressed(BT_USER4)) {
			// User4 is Unload
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[SCROLL_INCANTATION] *= 10;
			invoker.weaponstatus[SCROLL_INCANTATION] += 5;
		}
		
		if (invoker.inputVal 
		    && invoker.weaponStatus[SCROLL_INCANTATION] == invoker.inputVal) {
			SetWeaponState("cast");
		}
	}
	
	action void A_TransferToStaff() {
		HDAnthrakia staff = HDAnthrakia(FindInventory("HDAnthrakia"));
		if (!staff) {
			A_Print("You can't cast spells without a focus!\n"
			.."Find the Gate of Anthrakia before trying to learn this spell.");
		}
		if (invoker.learnVal) {
			int spellVal = 1<<(invoker.learnVal-1);
			if (invoker.bCASTWITHALT) {
				if (staff.weaponStatus[ANTK_ALTSPELLSKNOWN] & spellVal) {
					A_Print("You already know this spell!");
					return;
				} else {
					A_Print("Copied "..invoker.spellName.." to the Gate of Anthrakia.");
					staff.weaponStatus[ANTK_ALTSPELLSKNOWN] |= spellVal;
					A_LogInt(staff.weaponstatus[ANTK_ALTSPELLSKNOWN]);
					if (!invoker.bDESTROYED) {invoker.Destroy();}
				}
			} else {
				if (staff.weaponStatus[ANTK_SPELLSKNOWN] & spellVal) {
					A_Print("You already know this spell!");
					return;
				} else {
					A_Print("Copied "..invoker.spellName.." to the Gate of Anthrakia.");
					staff.weaponStatus[ANTK_SPELLSKNOWN] |= spellVal;
					A_LogInt(staff.weaponstatus[ANTK_SPELLSKNOWN]);
					if (!invoker.bDESTROYED) {invoker.Destroy();}
				}
			}
		} else {
			A_Print("This spell isn't compatible with the Gate of Anthrakia.");
		}
	}
	
	override string gethelptext(){
		return
		(bCASTWITHALT?WEPHELP_ALTFIRE:WEPHELP_FIRE).."  Prepare Scroll\n"
		.."  "..GetSpellInput().."  "..(bIDENTIFIED?spellName:"Cast Spell").."\n"
		..WEPHELP_UNLOAD.."  Transfer to Gate of Anthrakia"
		;
	}
	
	states {
		spawn:
			TNT1 A 1 {
				let sp = Spawn(invoker.dropActor,pos,ALLOW_REPLACE);
				sp.vel = vel;
			}
			stop;
			
		select0:
			TNT1 A 0 A_WeaponMessage("\ce\(\(\( \crUNIDENTIFIED SCROLL \ce\)\)\)\c-\n\n\nNot made\nby human hands.\n\nBeware.",175);
			TNT1 A 0 A_Raise(999);
			wait;
			
		deselect0:
			TNT1 A 0 A_Lower(999);
			wait;
			
		ready:
			TNT1 A 1 A_WeaponReady(WRF_ALL);
			loop;
			
		fire:
			TNT1 A 0 {invoker.weaponStatus[SCROLL_INCANTATION] = 0;}
		hold:
			TNT1 A 1 { 
				A_WeaponBusy();
				if (!invoker.bCASTWITHALT) {
					A_WeaponMessage(invoker.GetSpellInput(), 35);
					A_CheckScrollInputs();
				}
			}
			TNT1 A 0 A_Refire();
 			goto ready;
		
		altfire:
			TNT1 A 0 {invoker.weaponStatus[SCROLL_INCANTATION] = 0;}
		althold:
			TNT1 A 1 { 
				A_WeaponBusy();
				if (invoker.bCASTWITHALT) {
					A_WeaponMessage(invoker.GetSpellInput(), 35);
					A_CheckScrollInputs();
				}
			}
			TNT1 A 0 A_Refire();
 			goto ready;
			
		cast:
			TNT1 A 1;
			goto castend;
			
		castend:
			TNT1 A 1 {
				if (!invoker.bDESTROYED) {invoker.Destroy();}
			}
			stop;
			
		unload:
			TNT1 A 1 A_TransferToStaff();
			goto ready;
	}
}

class ODRScrollPickup : HDPickup {
	string spellCaster;
	property cast:spellCaster; 

	default {
		-hdpickup.droptranslation
		scale 0.5;
		inventory.pickupmessage "Picked up a scroll.";
		hdpickup.bulk 2;
		ODRScrollPickup.cast "ODRScrollCaster";
	}
	
	action void A_OpenScroll(string caster) {
		if (!FindInventory(caster)) {A_GiveInventory(caster);}
		A_SelectWeapon(caster);
		A_TakeInventory(invoker.GetClassName(), 1);
		A_StartSound("weapons/pocket",9);
	}
	
	states {
		spawn:
			SCRL A -1;
			stop;
		
		use:
			SCRL A 0 A_OpenScroll(invoker.spellCaster);
			fail;
	}
}

enum ScrollStats {
	SCROLL_INCANTATION = 1,
}

class ODRScrollPhlegethon : ODRScrollPickup {
	default {
		translation "ScrollOrange";
		ODRScrollPickup.cast "ODRScrollPhlegethonCast";
	}
}

class ODRScrollPhlegethonCast : ODRScrollCaster {
	default {
		ODRScrollCaster.title "Tongue of Phlegethon";
		ODRScrollCaster.spell 1;
		ODRScrollCaster.input 543;
		ODRScrollCaster.drop "ODRScrollPickup";
	}
	
	action void A_TongueOfPhlegethon() {
		A_FireProjectile("HDPhlegethonFireball",frandom(-3.5,3.5),0,0,-10,0,frandom(-2.0,2.0));
		A_FireProjectile("HDAnthrakiaGate");
	}
	
	states {
		cast:
			---- AAAAAA 1 {
				A_StartSound("weapons/anthrstart",CHAN_WEAPON);
				A_FireProjectile("HDAnthrakiaGate");
			}
			---- A 0 A_StartSound("weapons/anthrloop",5,CHANF_LOOPING);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_TongueOfPhlegethon();
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_TongueOfPhlegethon();
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_TongueOfPhlegethon();
			---- I 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthrstop",CHAN_WEAPON);
			}
			goto castend;
	}	
}

class ODRScrollEresia : ODRScrollPickup {
	default {
		translation "ScrollDarkOrange";
		ODRScrollPickup.cast "ODRScrollEresiaCast";
	}
}

class ODRScrollEresiaCast : ODRScrollCaster {
	default {
		+ODRScrollCaster.CASTWITHALT
		ODRScrollCaster.title "Pit of Eresia";
		ODRScrollCaster.spell 1;
		ODRScrollCaster.input 241;
		ODRScrollCaster.drop "ODRScrollPickup";
	}
	
	states {
		cast:
			TNT1 A 0 {
				A_StartSound("weapons/anthraltstart",CHAN_WEAPON);
				A_StartSound("weapons/anthraltloop",5,CHANF_LOOPING);
				A_FireProjectile("HDEresiaScrollFlame",0,0,0);
				A_FireProjectile("HDEresiaScrollFlame",-90,0,0);
				A_FireProjectile("HDEresiaScrollFlame",-180,0,0);
				A_FireProjectile("HDEresiaScrollFlame",90,0,0);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			---- A 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthraltstop",CHAN_WEAPON);
			}
			goto castend;
	}
}

class HDEresiaScrollFlame : HDActor {
	default {
		+MISSILE
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+THRUACTORS
		height 4;
		radius 4;
		renderStyle "Add";
		alpha 0.9;
		scale 0.9;
		damageType "hot";
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 {
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION);
				let light = Spawn("HDAnthrakiaRingLight", pos, ALLOW_REPLACE);
				light.target = self;
			}
			FLMT A 0;
			FLMT ABCDEFGABCDEFGABCDEFGABCDEFGABCDEFG 1 bright {
				A_HDBlast(
					64, random(10,30), 32, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					Spawn("HDEresiaFlameTrail",pos,ALLOW_REPLACE);
				}
			}
			FLMT ABCDEFGABCDEFGABCDEFGABCDEFGABCDEFG 1 bright {
				A_HDBlast(
					64, random(10,30), 32, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					Spawn("HDEresiaFlameTrail",pos,ALLOW_REPLACE);
				}
			}
			FLMT ABCDEFGABCDEFGABCDEFGABCDEFGABCDEFG 1 bright {
				A_HDBlast(
					64, random(10,30), 32, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					Spawn("HDEresiaFlameTrail",pos,ALLOW_REPLACE);
				}
			}
			FLMT ABCDEFG 1 bright {
				A_HDBlast(
					96, random(20,60), 48, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				A_FadeOut(0.1);
			}
			stop;
	}
}

class ODRScrollLibidine : ODRScrollPickup {
	default {
		translation "ScrollPink";
		ODRScrollPickup.cast "ODRScrollLibidineCast";
	}
}

class ODRScrollLibidineCast : ODRScrollCaster {
	default {
		+ODRScrollCaster.CASTWITHALT
		ODRScrollCaster.title "Gale of Libidine";
		ODRScrollCaster.spell 2;
		ODRScrollCaster.input 325;
		ODRScrollCaster.drop "ODRScrollPickup";
	}
	
	states {
		cast:
			TNT1 A 0 {
				A_StartSound("weapons/anthraltstart",CHAN_WEAPON);
				A_StartSound("weapons/anthrwindloop",5,CHANF_LOOPING);
				A_FireProjectile("HDLibidineScrollWind",0,0,0);
				A_FireProjectile("HDLibidineScrollWind",-90,0,0);
				A_FireProjectile("HDLibidineScrollWind",-180,0,0);
				A_FireProjectile("HDLibidineScrollWind",90,0,0);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
			---- A 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthraltstop",CHAN_WEAPON);
			}
			goto castend;
	}
}

class HDLibidineScrollWind : HDLibidineWind {
	default {
		+DONTTHRUST
		height 64;
		radius 64;
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION);
			#### AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_WindPush(128, 256);
				A_HDBlast(64, random(1,5), 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					A_SpawnItemEX("HDLibidineWindTrail",flags:SXF_TRANSFERPOINTERS);
				}
			}
			#### AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_WindPush(128, 256);
				A_HDBlast(64, random(1,5), 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					A_SpawnItemEX("HDLibidineWindTrail",flags:SXF_TRANSFERPOINTERS);
				}
			}
			#### AAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
				A_WindPush(128, 256);
				A_HDBlast(64, random(1,5), 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!(level.maptime % 2)){
					A_SpawnItemEX("HDLibidineWindTrail",flags:SXF_TRANSFERPOINTERS);
				}
			}
			stop;
	}
}