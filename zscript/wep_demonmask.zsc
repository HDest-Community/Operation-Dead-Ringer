/**
==== "THE MASK OF BASILISSA, QUEEN OF PHLEGETHON" ====
- Loadout Code: bsl
- Ammo Type: ???
- Modifiers: ???

The tangos say this big old skull belonged to a demon queen of some kind. She 
certainly seems like she's seen better days, but if her kin are anything to go
by, she sure does not sound like the kind of woman who goes down so easily. 
**/

class HDBasilissaMask : ODRMagicWeapon {
	default{
		//$Category "Weapons/Operation: Dead Ringer"
		//$Title "Mask of Basilissa"
		//$Sprite "BSLSA0"
		+hdweapon.hinderlegs
		weapon.selectionorder 72;
		weapon.slotnumber 7;
		weapon.slotpriority 2;
		weapon.kickback 200;
		weapon.bobrangex 0.4;
		weapon.bobrangey 1.1;
		weapon.bobspeed 1.8;
		weapon.bobstyle "normal";
		scale 0.8;
		hdweapon.barrelsize 6,0.5,2;
		hdweapon.refid "bsl";
		tag "$TAG_BASILISSA";
		obituary "$OBIT_BASILISSA";
		inventory.pickupmessage "$PICKUP_BASILISSA";
	}
	
	override double gunmass(){
		return 26;
	}
	override double weaponbulk(){
		return 420;
	}
	
	override string pickupmessage() {
		return StringTable.Localize(super.pickupmessage());
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Commune\n"
		..WEPHELP_ALTFIRE.."  Transfer Power\n"
		.."\n"
		.."\ci   Not made    \n"
		.."\ciby human hands.\n"
		.."\n"
		.."\ci    Beware.    \n";
	}
	
	override void AttachToOwner(Actor other) {
		super.AttachToOwner(other);
		if (level.maptime > 1) {A_StartSound("weapons/basillaugh", CHAN_VOICE);}
	}
	
	action void A_Unseal(int value) {
		int oldSeal = invoker.weaponStatus[BSLS_SEAL];
		HDPlayerPawn hdp = HDPlayerPawn(self);
		if (A_StealSoul(value * hd_odr_basilissasouldrain)){
			invoker.weaponStatus[BSLS_SEAL] += value;
			if (invoker.weaponStatus[BSLS_SEAL] > 49999 && oldSeal < 50000) {
				A_StartSound("weapons/basilunseal3", CHAN_WEAPON, CHANF_OVERLAP);
				if (hdp) {hdp.usegametip("\ciThe third seal is broken.\nThe wicked shall meet their end at Her hand.");}
			}
			else if (invoker.weaponStatus[BSLS_SEAL] > 29999 && oldSeal < 30000) {
				A_StartSound("weapons/basilunseal2", CHAN_WEAPON, CHANF_OVERLAP);
				if (hdp) {hdp.usegametip("\ciThe second seal is broken.\nThe earth trembles with Her fury.");}
			}
			else if (invoker.weaponStatus[BSLS_SEAL] > 9999 && oldSeal < 10000) {
				A_StartSound("weapons/basilunseal1", CHAN_WEAPON, CHANF_OVERLAP);
				if (hdp) {hdp.usegametip("\ciThe first seal is broken.\nThe sinners' cries shall not go unanswered.");}
			}
		}
	}
	
	states {
		spawn:
			BSKL A 0;
			BSKL A -1 A_StartSound("weapons/basilominous", 5, CHANF_LOOPING);
			stop;
			
		select0:
			BSLS A 0;
			goto select0bfg;
			
		deselect0:
			BSLS A 0;
			goto deselect0bfg;
			
		ready:
			BSLS A 1 A_WeaponReady();
			loop;
			
		fire:
			BSLS A 4; 
			BSL1 A 0 A_Refire();
			goto throwfire;
		hold:
			---- A 0 A_StartSound("weapons/basilcrackle", 5, CHANF_LOOPING);
			BSL2 ABCD 2;
		holdflare:
			---- E 0 {
				A_Unseal(random(30,90));
				A_StartSound("weapons/basilcharge2", CHAN_WEAPON, CHANF_OVERLAP);
			}
			BSL2 EFGHIJKLMNOPPP 2;
			---- P 0 A_Refire("holdflare");
			goto castfire;
			
		altfire:
			---- A 0 A_StartSound("weapons/basilcrackle", 5, CHANF_LOOPING);
			BSL2 ABCD 2;
		althold:
			---- E 0 {
				A_Unseal(random(120,360));
				A_StartSound("weapons/basilcharge2", CHAN_WEAPON, CHANF_OVERLAP);
			}
			BSL2 EFGHIJKLMNOPPP 2;
			---- P 0 A_Refire();
			goto endalt;
		endalt:
			---- E 0 { 
				A_StopSound(5);
			}
			BSL2 EDCBA 2;
			goto ready;
			
		throwfire:
			BSL1 ABCD 2;
			BSL1 E 2 {
				A_StartSound("weapons/basilcharge", CHAN_WEAPON, CHANF_OVERLAP);
				A_Unseal(random(10, 30));
			}
			BSL1 FGHIJKLMNO 2;
			BSL1 P 2 A_FireProjectile("HDBasilissaFireball");
			BSL1 QRSTU 2;
			BSL1 V 40;
			BSL1 WXYZ 2;
			goto ready;
			
		castfire:
			---- Q 0 {
				A_StopSound(5);
			}
			BSL2 QRSTU 2;
			BSL2 V 2 A_StartSound("weapons/basilcast", CHAN_WEAPON, CHANF_OVERLAP);
			BSL2 WXYZ 2;
			---- Z 0 A_JumpIf(invoker.weaponStatus[BSLS_SEAL] > 49999, "castfire_seal3");
			---- Z 0 A_JumpIf(invoker.weaponStatus[BSLS_SEAL] > 29999, "castfire_seal2");
			---- Z 0 A_JumpIf(invoker.weaponStatus[BSLS_SEAL] > 9999, "castfire_seal1");
			goto castfire_seal0;
		castfire_seal0:
			BSL3 A 2 {
				A_StartSound("weapons/basilcharge", CHAN_WEAPON, CHANF_OVERLAP);
				A_FireProjectile("HDBasilissaFissure");
			}
			goto endcast;
			
		castfire_seal1:
			BSL3 A 2 {
				A_StartSound("weapons/basilcharge", CHAN_WEAPON, CHANF_OVERLAP);
				A_FireProjectile("HDBasilissaFissure", -20);
				A_FireProjectile("HDBasilissaFissure", 20);
			}
			goto endcast;
		
		castfire_seal2:
			BSL3 A 2 {
				A_StartSound("weapons/basilcharge", CHAN_WEAPON, CHANF_OVERLAP);
				A_FireProjectile("HDBasilissaFissure");
				A_FireProjectile("HDBasilissaFissure", -40);
				A_FireProjectile("HDBasilissaFissure", 40);
			}
			goto endcast;
		
		castfire_seal3:
			BSL3 A 2 {
				A_StartSound("weapons/basilcharge", CHAN_WEAPON, CHANF_OVERLAP);
				A_FireProjectile("HDBasilissaGreaterFissure");
				A_FireProjectile("HDBasilissaFissure", -40);
				A_FireProjectile("HDBasilissaFissure", 40);
			}
			goto endcast;
		
		endcast:
			BSL3 BCDEFGHIJK 2;
			BSL3 YZ 2;
			BSL3 Z 80 A_WeaponReady(WRF_NOFIRE);
			goto ready;
		
	}
}

class HDBasilissaFireball : HDFireball {

	default {
		+ROLLSPRITE
		speed 50;
		seeSound "weapons/basilthrow";
		deathSound "weapons/basilhit";
		decal "BrontoScorch";
	}

	states {
		spawn:
			BSFB A 0;
			BSFB A 0 A_SetRoll(random(0,359));
			BSFB ABCDEFGHIJKLMNOPQRS 1 bright A_SpawnItemEX("HDBasilissaFireTail",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			loop;
		death:
			BSFB A 0 {
				A_HDBlast(
					384, random(100,300), 256, "hot",
					immolateradius:160, immolateamount:random(50,150), immolatechance:67
				);
				for (int i = 0; i<40; i++) {
					A_SpawnItemEX("HDBasilissaFireballShrapnel",0,0,0,random(-10,10),random(-10,10),random(5,10),SXF_NOCHECKPOSITION);
				}
				DistantQuaker.Quake(self,5,50,2048,8,128,256,256);
				A_AlertMonsters();
				actor xpl=spawn("HDExplosion", self.pos-(0,0,1), ALLOW_REPLACE);
				xpl.target=target; xpl.master=master; xpl.stamina=stamina;
				distantnoise.make(self, "weapons/basilboomfar");
			}
			FRFX ABCDEFGHIJKLMNOP 1 bright;
			stop;
	}
}

enum BasilissaStats {
	BSLS_SEAL = 1,
}

class HDBasilissaFlame : HDAnthrakiaFlame {
	default {
		stamina 32;
	}

	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 {
				let light = Spawn("HDAnthrakiaFireLight", pos, ALLOW_REPLACE);
				light.target = self;
			}
			TNT1 A 0 A_Jump(256, "bigfire", "midfire", "smallfire");
			goto spawnloop;
		bigfire:
			FLML A 0;
			goto spawnloop;
		midfire:
			FLMM A 0;
			goto spawnloop;
		smallfire:
			FLMS A 0;
			goto spawnloop;
		spawnloop:
			#### ABCDEFG 2 bright {
				A_FadeOut(0.01);
				A_SetTics(random(1,3));
			}
			loop;
		death:
			#### A 0;
			stop;
	}
}

class HDBasilissaFireballShrapnel : HDActor {
	default {
		+MISSILE
		+RIPPER
		-NOGRAVITY
		-BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		gravity 0.5;
		renderStyle "Add";
		scale 0.3;
		mass 1;
		damageType "hot";
		seeSound "";
		activeSound "";
		deathSound "";
		decal "BrontoScorch";
	}
	
	states {
		spawn:
			BSFB ABCDEFGHIJKLMNOPQRS 1 bright A_SpawnItemEX("HDBasilissaFireTailSmall",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			loop;
		
		death:
			BSFB A 0 A_SpawnItemEX("HDBasilissaFlame",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		xdeath:
			BSFB A 0 {
				A_HDBlast(
					128, random(50,150), 64, "hot",
					immolateradius:32, immolateamount:random(30,90), immolatechance:33
				);
				A_StartSound("weapons/basilboom2", CHAN_AUTO);
			}
			FRFX ABCDEFGHIJKLMNOP 1 bright;
			stop;
	}
}

class HDBasilissaFireTail : IdleDummy {
	default {
		+NOINTERACTION
        +DONTBLAST
        +DONTTHRUST
		+ROLLSPRITE
		alpha 0.9;
		renderStyle "Add";
	}

	states {
		spawn:
			BSFB A 0;
			BSFB A 0 {
				A_SetRoll(random(0,359));
				A_Jump(256, random(0,6));
			}
			BSFB ABCDEFGHIJKLMNOPQRS 1 bright;
			stop;
		
		death:
			BSFB A 0;
			stop;
			
	}
}

class HDBasilissaFireTailSmall : HDBasilissaFireTail {
	default {
		scale 0.3;
	}
}

class HDBasilissaFissure : HDActor {
	default {
		renderStyle "Add";
		+MISSILE
		+FLOORHUGGER
		+NOBLOCKMAP
		+THRUACTORS
		speed 30;
		reactiontime 10;
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0 {
				A_StartSound("weapons/basilcrackle", CHAN_AUTO, CHANF_LOOPING);
			}
			BFLM ABCDEFGHIJ 1 bright {
				A_SpawnItemEX("HDBasilissaPillarTrail",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				if (!(level.maptime % 5)) {
					A_StartSound("weapons/basilboom2", CHAN_AUTO);
					A_SpawnItemEX("HDBasilissaPillarSpawner", 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
					A_CountDown();
					vel.x = cos(angle+random(-45, 45))*speed;
					vel.y = sin(angle+random(-45, 45))*speed;
				}
			}
			loop;
	}
}

class HDBasilissaGreaterFissure : HDBasilissaFissure {
	default {
		reactiontime 15;
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 0 {
				A_StartSound("weapons/basilcrackle", CHAN_AUTO, CHANF_LOOPING);
				A_SpawnItemEX("HDBasilissaPillarSpawner", 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			BFLM ABCDEFGHIJ 1 bright {
				A_SpawnItemEX("HDBasilissaPillarTrail",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				
				if (!(level.maptime % 5)) {
					A_CountDown();
					vel.x = cos(angle+random(-45, 45))*speed;
					vel.y = sin(angle+random(-45, 45))*speed;
					}
					
				if (!(level.maptime % 10)) {
					A_StartSound("weapons/basilboom2", CHAN_AUTO);
					A_SpawnItemEX("HDBasilissaPillarSpawner", 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				}
				
				if (!(level.maptime % 25)) {
					A_SpawnItemEX("HDBasilissaFissure",0,0,0,vel.x,vel.y,0,SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_TRANSFERPOINTERS);
				}
			}
			loop;
	}
}

class HDBasilissaPillarSpawner : HDActor {
	default {
		+NOBLOCKMAP
	}
	
	states {
		spawn:
			TNT1 AAAA 35;
			TNT1 A 35 {
				DistantQuaker.Quake(self,1,75,512,2,128,256,256);
				HDMobAI.Frighten(self,512);
			}
			TNT1 A 0 {
				A_StartSound("weapons/basilboom2", CHAN_AUTO);
				A_SpawnItemEX("HDBasilissaFlame", 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				for (int i = 0; i<6; i++) {
					A_SpawnItemEX("HDBasilissaFireballShrapnel",0,0,0,random(-10,10),random(-10,10),random(5,10),SXF_NOCHECKPOSITION);
				}
				DistantQuaker.Quake(self,5,50,2048,8,128,256,256);
				A_AlertMonsters();
				actor xpl=spawn("HDExplosion", self.pos-(0,0,1), ALLOW_REPLACE);
				xpl.target=target; xpl.master=master; xpl.stamina=stamina;
				distantnoise.make(self, "weapons/basilboomfar");
			}
			stop;
	}
}

class HDBasilissaPillarTrail : IdleDummy {
	default {
		+NOINTERACTION
        +DONTBLAST
        +DONTTHRUST
		alpha 0.9;
		renderStyle "Add";
		reactionTime 35*5;
	}
	
	states {
		spawn:
			BFLM A 0;
			BFLM A 0 {
				A_SetScale(frandom(0.2,0.6));
				let light = Spawn("HDAnthrakiaFireLight", pos, ALLOW_REPLACE);
				light.target = self;
				A_Jump(256, random(0,9));
			}
		spawnloop:
			BFLM ABCDEFGHIJ 1 bright {
				A_CountDown();
				}
			loop;
	}
}