/**
== MONTARAZ 1899 ==
- Loadout Code: mtz
- Ammo Type: 12-Gauge Shot
- Modifiers: Left Choke (lchoke<0-7>), Right Choke (rchoke<0-7>)

A lot of the UAC boys have a thing for double-barrels, especially with all the 
legends about that one "doom" fellow, and this sawed-off little number plays to
that tune real nicely. The Slayer may have this thing more than beat in the 
range category, but at nearly half the weight, this thing's easy to carry and 
practically slips off your belt and up to ready before your enemies even know 
what hit them. Plus - although I'm legally required to tell you not to do 
this - it's possible to force an extra shell into each chamber, creating a chain
reaction that's absolutely going to tear apart whatever you point it at. 
...And the gun. 
...And the poor bastard holding the gun. 
...Yeah, "last resort" only on that one.
**/

class HDMontaraz : HDShotgun {
	transient CVar swapbarrels;
	default {
		//$Category "Weapons/Operation: Dead Ringer"
		//$Title "Montaraz 1899"
		//$Sprite "MNTZZ0"
		+hdweapon.fitsinbackpack
		weapon.selectionorder 33;
		weapon.slotnumber 3;
		weapon.slotpriority 3;
		inventory.pickupmessage "$PICKUP_MONTARAZ";
		obituary "$OBIT_MONTARAZ";
		weapon.bobrangex 0.18;
		weapon.bobrangey 0.7;
		scale 0.6;
		hdweapon.barrelsize 18,1,1;
		tag "$TAG_MONTARAZ";
		hdweapon.refid "mtz";
		
		hdweapon.loadoutcodes "
			\culchoke, rchoke - 0-7, 0 skeet, 7 full";
	}
	
	override double gunmass(){
		return 6;
	}
	
	override double weaponbulk(){
		return 60;
	}
	
	override string, double GetPickupSprite() {
		return "MNTZZ0", 1.;
	}
	
	override string pickupmessage() {
		return StringTable.Localize(super.pickupmessage());
	}
		
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("SHL1A0",(-47,-10),sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HDShellAmmo"),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int loffs=-31;int rofs=-18;
		if(hdw.weaponstatus[0]&MONTF_DOUBLE){
			loffs=-27;rofs=-23;
			sb.drawimage("STBURAUT",(-23,-17),sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[MONT_CHAMBER1]>1){
			sb.drawrect(loffs,-15,3,5);
			sb.drawrect(loffs,-9,3,2);
		}else if(hdw.weaponstatus[MONT_CHAMBER1]>0){
			sb.drawrect(loffs,-9,3,2);
		}
		if(hdw.weaponstatus[MONT_CHAMBER2]>1){
			sb.drawrect(rofs,-15,3,5);
			sb.drawrect(rofs,-9,3,2);
		}else if(hdw.weaponstatus[MONT_CHAMBER2]>0){
			sb.drawrect(rofs,-9,3,2);
		}
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,38,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*2;
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"dbbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Shoot Left (choke: "..weaponstatus[MONT_CHOKE1]..")\n"
		..WEPHELP_ALTFIRE.."  Shoot Right (choke: "..weaponstatus[MONT_CHOKE2]..")\n"
		..WEPHELP_RELOAD.."  Reload Left Barrel\n"
		..WEPHELP_ALTRELOAD.."  Reload Right Barrel\n"
		..WEPHELP_FIREMODE.."  Hold to force double shot\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	override void InitializeWepStats(bool idfa) {
		weaponstatus[MONT_CHAMBER1] = 2;
		weaponstatus[MONT_CHAMBER2] = 2;
		if(!idfa){
			weaponstatus[MONT_CHOKE1]=1;
			weaponstatus[MONT_CHOKE2]=1;
		}
		handshells = 0;
	}
	
	action void A_JumpIfChamberLoaded(StateLabel left, StateLabel right, StateLabel both)
	{
		bool leftLoaded = invoker.weaponStatus[MONT_CHAMBER1]>0;
		bool rightLoaded = invoker.weaponStatus[MONT_CHAMBER2]>0;
		
		if (leftLoaded && rightLoaded) {
			if (both) {SetWeaponState(both);}
		} else if (leftLoaded) {
			if (left) {SetWeaponState(left);}
		} else if (rightLoaded) {
			if (right) {SetWeaponState(right);}
		}
	}
		
	static void FireMontaraz(actor caller,bool right, bool toomuch=false){
		double shotpower=getshotpower();
		double spread=12.;
		double speedfactor=1.2;
		int choke = 7;
		let sss=HDMontaraz(caller.findinventory("HDMontaraz"));
		if(sss){
			choke=sss.weaponstatus[right?MONT_CHOKE2:MONT_CHOKE1];
			sss.shotpower=shotpower;
		}

		choke=clamp(choke,0,7);
		spread=12.5-0.5*choke;
		speedfactor=1.+0.02857*choke;
		
		if (toomuch) {
			shotpower *= 1.5;
			sss.MontarazBackfire(right);
		}

		spread*=shotpower;
		speedfactor*=shotpower;
		vector2 barreladjust=(0.8,-0.05);
		if(right)barreladjust=-barreladjust;
		HDBulletActor.FireBullet(caller,"HDB_wad",xyofs:barreladjust.x,aimoffx:barreladjust.y);
		let p=HDBulletActor.FireBullet(caller,"HDB_00",xyofs:barreladjust.x,
			spread:spread,aimoffx:barreladjust.y,speedfactor:speedfactor,amount:10
		);
		if (toomuch) {HDBulletActor.FireBullet(caller,"HDB_00",xyofs:barreladjust.x,
			spread:spread,aimoffx:barreladjust.y,speedfactor:speedfactor,amount:10
		);}
		distantnoise.make(p,"world/shotgunfar");
	}
	
	void MontarazBackfire(bool right) {
		if (!self) {return;}
		int ohshit = GetCVar("hd_odr_montoverload");
		switch (ohshit) {
			case MONTB_DESTROY:
				owner.A_Recoil(8);
				owner.DamageMobj(owner,self,random(40,80),"slashing");
			case MONTB_BREAK:
				actor xpl=spawn("WallChunker",self.pos-(0,0,1),ALLOW_REPLACE);
				xpl=spawn("HDExplosion", owner.pos-(0,0,1), ALLOW_REPLACE);
				xpl.stamina=1;
				owner.DropInventory(self);
				Destroy();
				break;
			case MONTB_OUCH:
				owner.DamageMobj(owner,self,random(20,40),"bashing");
			case MONTB_RECOIL:
				owner.A_Recoil(16);
				if (right) {A_MuzzleClimb(frandom(5., 10.), -frandom(5.,13.));}
				else {A_MuzzleClimb(-frandom(5., 10.), -frandom(5.,13.));}
				break;
			case MONTB_DROP:
				owner.A_Recoil(8);
				if (right) {A_MuzzleClimb(frandom(5., 10.), -frandom(5.,13.));}
				else {A_MuzzleClimb(-frandom(5., 10.), -frandom(5.,13.));}
				owner.DropInventory(self);
				break;
			case MONTB_NONE:
			default:
				break;
		}
	}
	
	action void A_LoadChamber(bool right, bool overload = false) {
		invoker.handshells--;
		A_StartSound("weapons/montarazload2",8,CHANF_OVERLAP);
		if (right) {
			if (overload) {invoker.weaponStatus[MONT_CHAMBER2] = 3;}
			else {invoker.weaponStatus[MONT_CHAMBER2] = 2;}
		}
		else {
			if (overload) {invoker.weaponStatus[MONT_CHAMBER1] = 3;}
			else {invoker.weaponStatus[MONT_CHAMBER1] = 2;}
		}
	}
	
	action void A_UnloadChamber() {
		A_StartSound("weapons/montarazload2",8,CHANF_OVERLAP);
		int toGet = (invoker.weaponStatus[MONT_CHAMBER1]-1);
		toGet += (invoker.weaponStatus[MONT_CHAMBER2]-1);
		if (toGet>0) {A_GiveInventory("HDShellAmmo", toGet);}
		invoker.weaponStatus[MONT_CHAMBER1] = 0;
		invoker.weaponStatus[MONT_CHAMBER2] = 0;
	}
	
	action void A_EjectSpentShells() {
		if (invoker.weaponStatus[MONT_CHAMBER1] == 1) {
			invoker.weaponStatus[MONT_CHAMBER1] = 0;
			A_SpawnItemEx("HDSpentShell",
					cos(pitch)*5,0,height-7-sin(pitch)*5,
					cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
					cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
					-sin(pitch-45)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
		}
		if (invoker.weaponStatus[MONT_CHAMBER2] == 1) {
			invoker.weaponStatus[MONT_CHAMBER2] = 0;
			A_SpawnItemEx("HDSpentShell",
					cos(pitch)*5,0,height-7-sin(pitch)*5,
					cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
					cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
					-sin(pitch-45)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
		}
		
	}
	
	states {
		spawn:
			MNTZ Z -1;
			stop;
			
		select0:
			MNTZ A 0 {invoker.swapbarrels=cvar.getcvar("hd_swapbarrels",player);}
			MNTZ A 1 A_Raise();
			MNTZ A 1 A_Raise(40);
			MNTZ A 1 A_Raise(40);
			MNTZ A 1 A_Raise(25);
			MNTZ A 1 A_Raise(20);
			wait;
			
		deselect0:
			MNTZ A 1 A_Lower();
			MNTZ A 1 A_Lower(20);
			MNTZ A 1 A_Lower(34);
			MNTZ A 1 A_Lower(50);
			
		fire:
		altfire:
			MNTZ A 0 A_ClearRefire();
			goto ready;
		ready:
			MNTZ A 0 {
				if (PressingFiremode()) {
					invoker.weaponStatus[0] |= MONTF_DOUBLE;
				} else {
					invoker.weaponStatus[0]&=~MONTF_DOUBLE;
				}
				int pff;
				if(invoker.swapbarrels&&invoker.swapbarrels.getbool()){
					pff=PressingAltfire();
					if(PressingFire())pff|=2;
				}else{
					pff=PressingFire();
					if(PressingAltfire())pff|=2;
				}

				bool ch1=invoker.weaponstatus[MONT_CHAMBER1]>1;
				bool ch2=invoker.weaponstatus[MONT_CHAMBER2]>1;
				bool dbl=invoker.weaponstatus[0]&MONTF_DOUBLE;

				if(ch1&&ch2){
					if(pff==3){
						A_Overlay(PSP_FLASH,"flashboth");
						return;
					}
					else if(pff&&dbl){
						setweaponstate("double");
						return;
					}
				}else if(pff&&dbl){
					if(ch1)A_Overlay(11,"flashleft");
					if(ch2)A_Overlay(12,"flashright");
				}
				if(ch1&&(pff&1))A_Overlay(11,"flashleft");
				else if(ch2&&(pff&2))A_Overlay(12,"flashright");
				else A_WeaponReady((WRF_ALL|WRF_NOFIRE)&~WRF_ALLOWUSER2);
			}
			MNTZ A 1 A_WeaponReady();
			goto readyend;
			
		double:
			MNTZ A 1 A_Overlay(11, "flashboth");
			goto ready;
		
		flashleft:
			TNT1 A 0 setweaponstate("leftrecoil");
			TNT1 A 1 bright{
				A_Light2();
				HDFlashAlpha(64,false,overlayid());
				A_StartSound("weapons/montarazfire1",CHAN_WEAPON,CHANF_OVERLAP);
				A_ZoomRecoil(0.9);
				invoker.FireMontaraz(self,0,invoker.weaponstatus[MONT_CHAMBER1]==3);
				invoker.weaponstatus[MONT_CHAMBER1]=1;
			}
			TNT1 A 1{
				A_Light0();
				double shotpower=invoker.shotpower;
				A_MuzzleClimb(0.8*shotpower,-1.6*shotpower,0.8*shotpower,-1.6*shotpower);
			}
			TNT1 A 0 A_AlertMonsters();
			stop;
		flashright:
			TNT1 A 0 setweaponstate("rightrecoil");
			TNT1 A 1 bright{
				A_Light2();
				HDFlashAlpha(64,false,overlayid());
				A_StartSound("weapons/montarazfire1",CHAN_WEAPON,CHANF_OVERLAP);
				A_ZoomRecoil(0.9);
				invoker.FireMontaraz(self,1,invoker.weaponstatus[MONT_CHAMBER2]==3);
				invoker.weaponstatus[MONT_CHAMBER2]=1;
			}
			TNT1 A 1{
				A_Light0();
				double shotpower=invoker.shotpower;
				A_MuzzleClimb(-0.8*shotpower,-1.6*shotpower,-0.8*shotpower,-1.6*shotpower);
			}
			TNT1 A 0 A_AlertMonsters();
			stop;
		flashboth:
			TNT1 A 0 setweaponstate("bothrecoil");
			TNT1 A 1 bright{
				A_Light2();
				HDFlashAlpha(128);
				A_StartSound("weapons/montarazfire1",CHAN_WEAPON,CHANF_OVERLAP);
				A_StartSound("weapons/montarazfire2",CHAN_WEAPON,CHANF_OVERLAP);
				A_ZoomRecoil(0.7);
				invoker.FireMontaraz(self,0,invoker.weaponstatus[MONT_CHAMBER1]==3);
				invoker.FireMontaraz(self,1,invoker.weaponstatus[MONT_CHAMBER2]==3);
				invoker.weaponstatus[MONT_CHAMBER1]=1;
				invoker.weaponstatus[MONT_CHAMBER2]=1;
			}
			TNT1 A 1{
				A_Light0();
				double shotpower=invoker.shotpower;
				double mlt=(invoker.bplayingid?0.6:-0.6)*shotpower;
				double mlt2=-3.*shotpower;
				A_MuzzleClimb(mlt,mlt2,mlt,mlt2);
			}
			TNT1 A 0 A_AlertMonsters();
			stop;
		
		leftrecoil:
			MTZL AB 1;
			goto anyrecoil;
		rightrecoil:
			MTZR AB 1;
			goto anyrecoil;
		bothrecoil:
			MNTZ BC 1;
			goto anyrecoil;
		anyrecoil:
			MNTZ DEFGH 1;
			goto ready;
		
		reload:
			MNTZ H 0 A_StartSound("weapons/montarazopen",8,CHANF_OVERLAP);
			MNTZ HI 2;
			MNTZ I 6 A_JumpIf(health>40,1);
			MNTZ I 4 A_StartSound("weapons/pocket",9);
			MNTZ I 4 A_StartSound("weapons/pocket",9);
			MNTZ I 3 A_StartSound("weapons/pocket",9);
			MNTZ I 0 {
				invoker.handshells = min(2, countInv("HDShellAmmo"));
				A_TakeInventory("HDShellAmmo", invoker.handshells);
				if (invoker.handshells < 1) {SetWeaponState("nevermind");}
			}
			MNTZ I 0 {
				A_EjectSpentShells();
			    A_JumpIfChamberLoaded("overload", "reloadrightfull", "overloadrightfull");
			}
			MNTZ JKL 2;
			MTZL F 2 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZL GH 2;
			MTZL I 2 A_LoadChamber(0);
			MTZL I 0 A_JumpIf(PressingAltreload(), "quickaltreload");
			MTZL I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
		reloadrightfull:
			MTZR EDC 2;
		quickreload:
			MTZL J 0 {
				if (invoker.weaponstatus[MONT_CHAMBER1]==3 || invoker.handshells<1) {SetWeaponState("close");}
				else if (invoker.weaponstatus[MONT_CHAMBER1]==2) {SetWeaponState("quickoverload");}
			}
			MTZL J 2 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZL KL 2;
			MTZL M 2 A_LoadChamber(0);
			MTZL I 0 A_JumpIf(PressingAltreload(), "quickaltreload");
			MTZL I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
			
		altreload:
			MNTZ H 0 A_StartSound("weapons/montarazopen",8,CHANF_OVERLAP);
			MNTZ HI 2;
			MNTZ I 6 A_JumpIf(health>40,1);
			MNTZ I 4 A_StartSound("weapons/pocket",9);
			MNTZ I 4 A_StartSound("weapons/pocket",9);
			MNTZ I 3 A_StartSound("weapons/pocket",9);
			MNTZ I 0 {
				invoker.handshells = min(2, countInv("HDShellAmmo"));
				A_TakeInventory("HDShellAmmo", invoker.handshells);
			}
			MNTZ I 0 {
				A_EjectSpentShells();
				A_JumpIfChamberLoaded("altreloadleftfull", "altoverload", "altoverloadleftfull");
			}
			MNTZ JKL 2;
			MTZR F 2 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZR GH 2;
			MTZR I 2 A_LoadChamber(1);
			MTZR I 0 A_JumpIf(PressingReload(), "quickreload");
			MTZR I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickreload");
			goto close;
		altreloadleftfull:
			MTZL EDC 2;
		quickaltreload:
			MTZR J 0 {
				if (invoker.weaponstatus[MONT_CHAMBER2]==3 || invoker.handshells<1) {SetWeaponState("close");}
				else if (invoker.weaponstatus[MONT_CHAMBER2]==2) {SetWeaponState("quickaltoverload");}
			}
			MTZR J 2 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZR KL 2;
			MTZR M 2 A_LoadChamber(1);
			MTZR I 0 A_JumpIf(PressingReload(), "quickreload");
			MTZR I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickreload");
			goto close;
			
		close: 
			MNTZ K 0 {
				A_StartSound("weapons/montarazclose",8,CHANF_OVERLAP);
				A_JumpIfChamberLoaded("closeleft", "closeright", "closeboth");
			}
			MNTZ KJIH 2;
			MNTZ A 0 A_JumpIf(invoker.handshells>0, "putitback"); 
			goto ready;
		closeleft:
			MTZL CDE 2;
			MNTZ P 2;
			MNTZ A 0 A_JumpIf(invoker.handshells>0, "putitback"); 
			goto ready;
		closeright:
			MTZR CDE 2;
			MNTZ P 2;
			MNTZ A 0 A_JumpIf(invoker.handshells>0, "putitback"); 
			goto ready;
		closeboth:
			MNTZ MNOP 2;
			MNTZ A 0 A_JumpIf(invoker.handshells>0, "putitback"); 
			goto ready;
			
		putitback:
			MNTZ A 4 A_StartSound("weapons/pocket",9);
			MNTZ A 0 {
				A_GiveInventory("HDShellAmmo", invoker.handshells);
				invoker.handshells = 0;
			}
			goto ready;

		overload:
			MTZL EDC 2;
			MTZL N 12 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZL N 0 A_JumpIf(!PressingReload()&&!GetCVar("hd_odr_monteasyoverload"), "close");
			MTZL GH 2;
			MTZL I 2 A_LoadChamber(0, true);
			MTZL I 0 A_JumpIf(PressingAltreload(), "quickaltreload");
			MTZL I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
		overloadrightfull:
			MNTZ ONM 2;
		quickoverload:
			MTZL O 0 {
				if (invoker.weaponstatus[MONT_CHAMBER1]==3 || invoker.handshells<1) {SetWeaponState("close");}
			}
			MTZL O 12 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZL O 0 A_JumpIf(!PressingReload()&&!GetCVar("hd_odr_monteasyoverload"), "close");
			MTZL KL 2;
			MTZL M 2 A_LoadChamber(0, true);
			MTZL I 0 A_JumpIf(PressingAltreload(), "quickaltreload");
			MTZL I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
		altoverload:
			MTZR EDC 2;
			MTZR N 12 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZR N 0 A_JumpIf(!PressingAltreload()&&!GetCVar("hd_odr_monteasyoverload"), "close");
			MTZR GH 2;
			MTZR I 2 A_LoadChamber(1, true);
			MTZR I 0 A_JumpIf(PressingReload(), "quickreload");
			MTZR I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
		altoverloadleftfull:
			MNTZ ONM 2;
		quickaltoverload:
			MTZR O 0 {
				if (invoker.weaponstatus[MONT_CHAMBER2]==3 || invoker.handshells<1) {SetWeaponState("close");}
			}
			MTZR O 12 A_StartSound("weapons/montarazload1",8,CHANF_OVERLAP);
			MTZR O 0 A_JumpIf(!PressingAltreload()&&!GetCVar("hd_odr_monteasyoverload"), "close");
			MTZR KL 2;
			MTZR M 2 A_LoadChamber(1, true);
			MTZR I 0 A_JumpIf(PressingReload(), "quickreload");
			MTZR I 0 A_JumpIf(invoker.handshells&&GetCVar("hd_odr_montloadsboth"), "quickaltreload");
			goto close;
		
		nevermind:
			MNTZ IH 2;
			goto nope;
		
		unload:
			MNTZ H 0 A_StartSound("weapons/montarazopen",8,CHANF_OVERLAP);
			MNTZ HI 2;
			MNTZ I 0 A_EjectSpentShells();
			MNTZ J 1 offset(0,34);
			MNTZ J 1 offset(0,42);
			MNTZ K 1 offset(0,54);
			MNTZ K 1 offset(0,68);
			TNT1 A 4 A_UnloadChamber();
			MNTZ K 1 offset(0,68);
			MNTZ K 1 offset(0,54);
			MNTZ J 1 offset(0,42);
			MNTZ J 1 offset(0,34);
			MNTZ IH 2;
			goto ready;
	}
}

enum MontarazStats {
	MONTF_UNLOADONLY = 1,
	MONTF_DOUBLE = 2,
	
	MONT_CHAMBER1 = 1,
	MONT_CHAMBER2 = 2,
	//3 is for side saddles in case I ever make a version with them
	MONT_HEAT1 = 4,
	MONT_HEAT2 = 5,
	MONT_CHOKE1 = 6,
	MONT_CHOKE2 = 7,
	
	MONTB_NONE = 0,
	MONTB_DESTROY = 1,
	MONTB_BREAK = 2,
	MONTB_OUCH = 3,
	MONTB_RECOIL = 4,
	MONTB_DROP = 5,
}

class HDMontarazRandom : IdleDummy {
	states {
		spawn:
			TNT1 A 0 nodelay {
				let wpn = HDMontaraz(Spawn("HDMontaraz", pos, ALLOW_REPLACE));
				HDF.TransferSpecials(self,wpn,HDF.TS_ALL);
				wpn.vel = vel;
				if (random(0, 99) < hd_odr_montarazchokechance){
					wpn.weaponStatus[MONT_CHOKE1] = random(0, 7);
					wpn.weaponStatus[MONT_CHOKE2] = random(0, 7);
				}
				A_SpawnItemEx("ShellPickup",-3,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShellPickup",3,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
			stop;
	}
}