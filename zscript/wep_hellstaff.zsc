/**
==== "THE GATE OF ANTHRAKIA" ====
- Loadout Code: goa
- Ammo Type: ???
- Modifiers: ???

We're not entirely sure where this thing came from. It just kind of showed up in
the armory one day. A few of our men took it out into the field to see if they 
could figure it out, but the only one who came back went completely off the deep 
end. Found the poor kid muttering to himself in a language none of us could 
understand. The one thing we could work out of him was that the staff can open
portals to the depths of Hell itself. ...Be careful with this thing. I don't
think I need to tell you how dangerous a portal to Hell can be.
**/

class HDAnthrakia : ODRMagicWeapon {
	bool casting;
	static const string ANTHRAKIA_FIREINPUTS[] = {
		"  "..WEPHELP_UNLOAD..", "..WEPHELP_FIREMODE..", "
		..WEPHELP_ZOOM.."  Tongue of Phlegethon\n"
	};
	
	static const string ANTHRAKIA_ALTINPUTS[] = {
		"  "..WEPHELP_ALTRELOAD..", "..WEPHELP_FIREMODE..", "
		..WEPHELP_RELOAD.."  Pit of Eresia\n",
		"  "..WEPHELP_ZOOM..", "..WEPHELP_ALTRELOAD..", "
		..WEPHELP_UNLOAD.."  Gale of Libidine\n"
	};
	
	default{
		//$Category "Weapons/Operation: Dead Ringer"
		//$Title "Gate of Anthrakia"
		//$Sprite "NTKPA0"
		weapon.selectionorder 63;
		weapon.slotnumber 6;
		weapon.slotpriority 3;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		hdweapon.barrelsize 6,0.5,2;
		hdweapon.refid "goa";
		tag "$TAG_HELLSTAFF";
		obituary "$OBIT_HELLSTAFF";
		inventory.pickupmessage "$PICKUP_HELLSTAFF";
	}
	
	override string pickupmessage() {
		return StringTable.Localize(super.pickupmessage());
	}
	
	override double gunmass() {
		return 12;
	}
	
	override double weaponbulk() {
		return 55;
	}
	
	int GetSpellFlag(int spellNum) {
		return 1<<(spellNum-1);
	}
	
	override void InitializeWepStats() {
		let mainMax = (1<<NTKC_MAXSPELLS)-1;
		let altMax = (1<<NTKC_MAXALTSPELLS)-1;
		switch (hd_odr_anthrakiaspellsknown) {
			case 1:
				weaponstatus[ANTK_SPELLSKNOWN] = 1;
				weaponstatus[ANTK_ALTSPELLSKNOWN] = 1;
				break;
			case 2:
				weaponstatus[ANTK_SPELLSKNOWN] = random(0,mainMax);
				weaponstatus[ANTK_ALTSPELLSKNOWN] = random(0,altMax);
				break;
			case 3:
				weaponstatus[ANTK_SPELLSKNOWN] = mainMax;
				weaponstatus[ANTK_ALTSPELLSKNOWN] = altMax;
				break;
			default:
				weaponstatus[ANTK_SPELLSKNOWN] = 0;
				weaponstatus[ANTK_ALTSPELLSKNOWN] = 0;
				break;
		}
	}
	
	override void DetachFromOwner() {
		owner.A_StopSound(5);
		super.DetachFromOwner();
	}
	
	string GetSpellInputs(bool altfire) {
		let spellList = "";
		int i = 0;
		if (altfire) {
			for (i = 0; i < NTKC_MAXALTSPELLS; i++) {
				if (weaponstatus[ANTK_ALTSPELLSKNOWN] & 1 << i) {
					spellList = spellList..ANTHRAKIA_ALTINPUTS[i];
				}
			}
		} else {
			for (i = 0; i < NTKC_MAXSPELLS; i++) {
				if (weaponstatus[ANTK_SPELLSKNOWN] & 1 << i) {
					spellList = spellList..ANTHRAKIA_FIREINPUTS[i];
				}
			}
		}
		return spellList;
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Extend Staff\n"
		..GetSpellInputs(false)
		..WEPHELP_ALTFIRE.."  Raise Staff\n"
		..GetSpellInputs(true)
		;
	}
	
	action void A_CheckRuneInputs() {
		if (JustPressed(BT_RELOAD)) {
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[ANTK_INCANTATION] *= 10;
			invoker.weaponstatus[ANTK_INCANTATION] += 1;
		}
		
		if (JustPressed(BT_USER1)) { 
			// User1 is AltReload
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[ANTK_INCANTATION] *= 10;
			invoker.weaponstatus[ANTK_INCANTATION] += 2;
		}
		
		if (JustPressed(BT_ZOOM)) {
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[ANTK_INCANTATION] *= 10;
			invoker.weaponstatus[ANTK_INCANTATION] += 3;
		}
		
		if (JustPressed(BT_USER2)) {
			// User2 is Firemode
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[ANTK_INCANTATION] *= 10;
			invoker.weaponstatus[ANTK_INCANTATION] += 4;
		}
		
		if (JustPressed(BT_USER4)) {
			// User4 is Unload
			A_StartSound("weapons/anthrune",8,CHANF_OVERLAP);
			invoker.weaponstatus[ANTK_INCANTATION] *= 10;
			invoker.weaponstatus[ANTK_INCANTATION] += 5;
		}
	}
	
	action void A_CheckSpells() {
		switch (invoker.weaponstatus[ANTK_INCANTATION]) {
			case 543:
				if (PressingFire() && (invoker.weaponStatus[ANTK_SPELLSKNOWN] & invoker.GetSpellFlag(NTKSPF_PHLEGETHON))) 
					{SetWeaponState("cast_tongueofphlegethon");}
				break;
			case 241:
				if (PressingAltfire() && (invoker.weaponStatus[ANTK_ALTSPELLSKNOWN] & invoker.GetSpellFlag(NTKSPA_ERESIA))) 
					{SetWeaponState("cast_pitoferesia");}
				break;
			case 325:
				if (PressingAltfire() && (invoker.weaponStatus[ANTK_ALTSPELLSKNOWN] & invoker.GetSpellFlag(NTKSPA_LIBIDINE))) 
					{SetWeaponState("cast_galeoflibidine");}
				break;
			default:
				break;
		}
	}
	
	states {
	
		spawn:
			NTKP A -1;
			stop;
			
		select0:
			ANTK A 0;
			goto select0big;
			
		deselect0:
			ANTK A 0;
			goto deselect0big;
			
		ready:
			ANTK A 1 {
				invoker.barrellength = 6;
				A_WeaponReady();
			}
			goto readyend;
			
		fire:
			---- A 0 {invoker.weaponstatus[ANTK_INCANTATION] = 0;
			invoker.barrellength = 18;}
			ANTK BBCCDDEEFF 1 A_CheckRuneInputs();
		hold:
			ANTK F 1 {
				A_CheckRuneInputs();
				A_CheckSpells();
			}
			ANTK F 0 A_Refire();
		nofire:
			ANTK EDCB 2;
			goto ready;
		
		altfire:
			---- A 0 {invoker.weaponstatus[ANTK_INCANTATION] = 0;}
			NTK2 BBCCDDEEFF 1 A_CheckRuneInputs();
		althold:
			NTK2 F 1 {
				A_CheckRuneInputs();
				A_CheckSpells();
			}
			NTK2 F 0 A_Refire();
		noaltfire:
			NTK2 EDCB 2;
			goto ready;
			
		cast_tongueofphlegethon:
			---- G 0 {
				invoker.casting = true;
				A_StartSound("weapons/anthrstart",CHAN_WEAPON);
			}
			ANTK GHI 2;
			---- I 0 A_StartSound("weapons/anthrloop",5,CHANF_LOOPING);
		firestream:
			ANTK I 1 {
				A_FireProjectile("HDPhlegethonFireball",frandom(-3.5,3.5),0,0,-10,0,frandom(-2.0,2.0));
				A_FireProjectile("HDAnthrakiaGate");
				A_StealSoul(5 * hd_odr_anthrakiasouldrain);
			}
			ANTK I 0 A_Refire("firestream");
			---- I 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthrstop",CHAN_WEAPON);
			}
			goto endcast;
			
		cast_pitoferesia:
			---- G 0 {
				invoker.casting = true;
				A_StartSound("weapons/anthraltstart",CHAN_WEAPON);
			}
			NTK2 GHI 2;
			---- I 0 {
				A_StartSound("weapons/anthraltloop",5,CHANF_LOOPING);
				A_FireProjectile("HDEresiaFlame",0,0,0);
				A_FireProjectile("HDEresiaFlame",-90,0,0);
				A_FireProjectile("HDEresiaFlame",-180,0,0);
				A_FireProjectile("HDEresiaFlame",90,0,0);
			}
		pitoferesialoop:
			NTK2 I 1 {
				A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
				A_StealSoul(5 * hd_odr_anthrakiasouldrain);
			}
			NTK2 I 0 A_Refire("pitoferesialoop");
			---- I 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthraltstop",CHAN_WEAPON);
			}
			goto endaltcast;
			
		cast_galeoflibidine:
			---- G 0 {
				invoker.casting = true;
				A_StartSound("weapons/anthraltstart",CHAN_WEAPON);
			}
			NTK2 GHI 2;
			---- I 0 {
				A_StartSound("weapons/anthrwindloop",5,CHANF_LOOPING);
				A_FireProjectile("HDLibidineWind",0,0,0);
				A_FireProjectile("HDLibidineWind",-90,0,0);
				A_FireProjectile("HDLibidineWind",-180,0,0);
				A_FireProjectile("HDLibidineWind",90,0,0);
			}
		galeoflibidineloop:
			NTK2 I 1 {
				A_FireProjectile("HDAnthrakiaGate",0,0,0,26,0,0);
				A_StealSoul(5 * hd_odr_anthrakiasouldrain);
			}
			NTK2 I 0 A_Refire("galeoflibidineloop");
			---- I 0 {
				A_StopSound(5);
				A_StartSound("weapons/anthraltstop",CHAN_WEAPON);
			}
			goto endaltcast;
			
		endcast:
			---- I 0 {invoker.casting = false;}
			ANTK IHGEDCB 2;
			goto ready;
			
		endaltcast:
			---- I 0 {invoker.casting = false;}
			NTK2 IHGEDCB 2;
			goto ready;
		
	}
}

enum AnthrakiaStats {
	NTKSPF_PHLEGETHON = 1,
	
	NTKSPA_ERESIA = 1,
	NTKSPA_LIBIDINE = 2,
	
	NTKC_MAXSPELLS = 1,
	NTKC_MAXALTSPELLS = 2,

	ANTK_SPELLSKNOWN = 1,
	ANTK_ALTSPELLSKNOWN = 2,
	ANTK_INCANTATION = 3,
}

class HDAnthrakiaGate : IdleDummy {
	default {
	    renderStyle "Add";
        alpha 0.2;
        scale 0.4;
        speed 25;
    }

    states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 A_Stop;
			AGAT A 2 Bright {
				let light = Spawn("HDAnthrakiaLight", pos, ALLOW_REPLACE);
				light.target = self;
				if (!random(0, int(1024/hd_odr_anthrakiafragleak))){
					Spawn("BFGNecroShard", pos, ALLOW_REPLACE);
				}
			}
			stop;
    }
}

class HDAnthrakiaLight : PointLight {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		args[0] = 255;
		args[1] = 192;
		args[2] = 64;
		args[3] = 16;
	}
	
	override void Tick() {
		if (!target) {
			Destroy();
			return;
		}
		args[3] = random(16,20);
		super.Tick();
	}
}

class HDAnthrakiaFireLight : PointLight {
	default {
		+DynamicLight.ADDITIVE
		}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		args[0] = 60;
		args[1] = 40;
		args[2] = 10;
		args[3] = 128;
	}
	
	override void Tick() {
		if (!target) {
			Destroy();
			return;
		}
		args[3]=int(frandom(0.95,1.04)*args[3]);
		super.Tick();
	}
}

class HDAnthrakiaRingLight : HDAnthrakiaFireLight {
	override void PostBeginPlay() {
		super.PostBeginPlay();
		args[0] = 60;
		args[1] = 40;
		args[2] = 10;
		args[3] = 64;
	}
}

class HDPhlegethonFireball : HDFireball {
	default {
		seeSound "none";
		activeSound "none";
		deathSound "weapons/anthrfireball";
		decal "BrontoScorch";
		alpha 0.9;
		speed 30;
	}
	
	states {
		spawn:
			NTKF ABCDEFGHIJKLMNOPQRS 1 Bright;
			stop;
		
		death:
			---- Q 0 {
				A_HDBlast(
					32, random(4,12), 24, "hot",
					immolateradius:24, immolateamount:-100, immolatechance:25
				);
				Spawn("HDAnthrakiaFlame", pos, ALLOW_REPLACE);
			}
			NTKF QRS 1;
			stop;
	}
}

class HDAnthrakiaFlame : PersistentDamager {
	default {
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+THRUACTORS
		height 4;
		radius 4;
		renderStyle "Add";
		alpha 0.9;
		scale 0.9;
		damageType "hot";
		stamina 16;
	}
	
	states {
		spawn:
			TNT1 A 1 nodelay A_SpawnItemEx("HDAnthrakiaFireLight",flags:SXF_SETTARGET);
			TNT1 A 0 A_Jump(256, "bigfire", "midfire", "smallfire");
			goto spawnloop;
		bigfire:
			FLML A 0;
			goto spawnloop;
		midfire:
			FLMM A 0;
			goto spawnloop;
		smallfire:
			FLMS A 0;
			goto spawnloop;
		spawnloop:
			#### ABCDEFG 2 bright {
				A_FadeOut(0.05);
				if (alpha < 0.2) {
					actor sp=spawn("HDFlameRed",pos,ALLOW_REPLACE);
					sp.vel+=vel+(frandom(-2,2),frandom(-2,2),frandom(-1,3));
				}
				A_SetTics(random(1,3));
			}
			loop;
		death:
			#### A 0;
			stop;
	}
}


class HDEresiaFlame : HDActor {
	HDAnthrakia source;
	default {
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+THRUACTORS
		height 4;
		radius 4;
		renderStyle "Add";
		alpha 0.9;
		scale 0.9;
		damageType "hot";
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 {
				source = HDAnthrakia(target.FindInventory("HDAnthrakia"));
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION);
				let light = Spawn("HDAnthrakiaRingLight", pos, ALLOW_REPLACE);
				light.target = self;
			}
			FLMT A 0;
			goto spawnloop;
		spawnloop:
			#### ABCDEFG 1 bright {
				source = HDAnthrakia(target.FindInventory("HDAnthrakia"));
				A_HDBlast(
					64, random(10,30), 32, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!source || !source.casting) {
					return ResolveState("burnout");
				} else if (!(level.maptime % 2)){
					Spawn("HDEresiaFlameTrail",pos,ALLOW_REPLACE);
				}
				return ResolveState(null);
			}
			loop;
		burnout:
			#### ABCDEFG 1 bright {
				A_HDBlast(
					96, random(20,60), 48, "hot",
					immolateradius:32, immolateamount:-100, immolatechance:40
				);
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				A_FadeOut(0.1);
			}
			stop;
	}
}

class HDEresiaFlameTrail : HDEresiaFlame {
	states {
		spawn:
			TNT1 A 0;
			---- A 0 {
				let light = Spawn("HDAnthrakiaRingLight", pos, ALLOW_REPLACE);
				light.target = self;
			}
			TNT1 A 0 A_Jump(256, "bigfire", "midfire", "smallfire");
			goto spawnloop;
		bigfire:
			FLML A 0;
			goto spawnloop;
		midfire:
			FLMM A 0;
			goto spawnloop;
		smallfire:
			FLMS A 0;
			goto spawnloop;
		spawnloop:
			#### ABCDEFG 2 bright {
				A_HDBlast(
					96, random(10,30), 48, "hot",
					immolateradius:16, immolateamount:5, immolatechance:5
				);
				A_FadeOut(0.1);
				if (alpha < 0.2) {
					actor sp=spawn("HDFlameRed",pos,ALLOW_REPLACE);
					sp.vel+=vel+(frandom(-2,2),frandom(-2,2),frandom(-1,3));
					Destroy();
				}
				A_SetTics(random(1,3));
			}
			loop;
	}
}

class HDLibidineWind : HDEresiaFlame {
	default {
		+DONTTHRUST
		height 64;
		radius 64;
	}
	
	action void A_WindPush(double radius = 0, double force = 0) {
		blockthingsiterator itt=blockthingsiterator.create(self,radius);
		while(itt.Next()){
			actor it=itt.thing;
			if (!it) {continue;}
			double ithalfheight=it.height*0.5;
			double dist=self.distance3d(it);
			double pushamount = force;
			if(dist<=radius&&it.bshootable&&!it.bdontthrust){
			  if(it.radiusdamagefactor)
				{pushamount *= it.radiusdamagefactor;}
			  double divdist=(!dist||dist<min(it.radius,ithalfheight))?1:clamp(1./dist,0.,1.);
			  vector3 push=(it.pos-(pos-(0,0,32)))*divdist*pushamount;
			  if(pushamount<it.mass){push=(0,0,0);}
			  else if(it.mass)push/=it.mass;
			  it.vel += push;
			}
		}
	}
	
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 {
				source = HDAnthrakia(target.FindInventory("HDAnthrakia"));
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION);
			}
			goto spawnloop;
		spawnloop:
			#### A 1 {
				source = HDAnthrakia(target.FindInventory("HDAnthrakia"));
				A_WindPush(128, 256);
				A_HDBlast(64, random(1,5), 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				if (!source || !source.casting) {
					return ResolveState("leave");
				} else if (!(level.maptime % 2)){
					A_SpawnItemEX("HDLibidineWindTrail",flags:SXF_TRANSFERPOINTERS);
				}
				return ResolveState(null);
			}
			loop;
		leave:
			#### A 1 {
				A_WindPush(128, 256);
				A_HDBlast(64, random(1,5), 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				A_FadeOut(0.1);
			}
			loop;
	}
}

class HDLibidineWindTrail : HDLibidineWind {
	states {
		spawn:
			TNT1 A 0;
			TNT1 A 1 {
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION);
			}
			goto spawnloop;
		spawnloop:
			#### A 1 {
				A_WindPush(128, 256);
				A_HDBlast(64, 1, 32, "bashing");
				A_Warp(AAPTR_TARGET,160.0,0.0,0.0,6,WARPF_USECALLERANGLE | WARPF_NOCHECKPOSITION | WARPF_INTERPOLATE);
				A_FadeOut(0.1);
			}
			loop;
	}
}